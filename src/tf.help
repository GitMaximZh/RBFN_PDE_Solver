if ``axis=-1`` it will be the last dimension

tf.unstack (old name unpack)
    tensor - [[1,3], [2,1]] to iterable collection - [1,3], [2,1]
    https://www.tensorflow.org/api_docs/python/tf/unstack

    For example, given a tensor of shape (A, B, C, D);

    If axis == 0 then the i'th tensor in output is the slice value[i, :, :, :] and each tensor in output will have
    shape (B, C, D). (Note that the dimension unpacked along is gone, unlike split).

    If axis == 1 then the i'th tensor in output is the slice value[:, i, :, :] and each tensor in output will have
    shape (A, C, D). Etc.


tf.stack
    https://www.tensorflow.org/api_docs/python/tf/stack
    # 'x' is [1, 4]
    # 'y' is [2, 5]
    # 'z' is [3, 6]
    stack([x, y, z]) => [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.
    stack([x, y, z], axis=1) => [[1, 2, 3], [4, 5, 6]]


tf.split
    https://www.tensorflow.org/api_docs/python/tf/split

    compare to unstack it keeps dimensions amount
    i.e. for example
        tensor - [[1,3], [2,1]]
        split(num=2,axis=1) - [[1,3]], [[2,1]]
        unpack - to iterable collection - [1,3], [2,1]


tf.map_fn
    map on the list of tensors unpacked from elems on dimension 0.
    !note it uses unpack (unstack)
    tf.map_fn(lambda i: tf.square(nn.y(x[i]) - y0[i]), tf.range(cp_count), dtype=type))


tf.reshape
    parameters = tf.Variable([1.5, 1.0, 1.2, 0.1], dtype=tf.float64)
    tf.reshape(parameters, [-1, 2]) #[[r1.c, r1.a], [r2.c, r2.a]]



numpy.frompyfunc
    apply function to each element of collection(s) keeping shape

    np.frompyfunc(lambda x, y: s.run(nn.y([x, y])), 2, 1)(X, Y)

numpy.vectorize (more generic than frompyfunc)
    apply function to each element of collection(s) keeping shape

numpy.tile:
    repeat array - np.tile([1, 2], (2, 1)) = [[1,2], [1,2]]

numpy.expand_dims:
    numpy.expand_dims([1, 2], axis=1) -> [[1], [2]])




builtins.all:
    checks if all elements of array are true [condition(e) for e in array]

builtins.zip:
    zip values - zip(array1, array2, ...)
